language = "python3"
run = "python3 vocoder.py"

# 1. Write a function called shout that takes in a string as an argument and returns it in all caps.
def shout(argument):
  argument = argument.upper()
  return f'{argument}'

print(shout("hello"))


# 2. Write a function called whisper that takes in a string as an argument and returns it in all lowercase.
def whisper(argument):
  argument = argument.lower()
  return f'{argument}'

print(whisper("HELLO"))




# 3. Write a function called how_many_letters that takes in a string as an argument and returns the number of letters in that string.
def how_many_letters(argument):
  argument = len(argument)
  return f'{argument}'

print(how_many_letters("two"))




# 4. Write a function called work_it that takes in a string as an argument and returns it backwards and with the first letter capitalized.
#    For example, work_it("I put my thing down flip it and reverse it") would return "Ti esrever dna ti pilf nwod gniht ym tup i"
def work_it(argument):
  argument = argument.lower()[::-1].capitalize()
  return f'{argument}'

print(work_it("hello"))




# 5. Write a function called repeat_it that takes in a word and a number, and returns the word that many times.
#    For example, repeat_it("Banana", 3) would return "BananaBananaBanana"
def repeat_it(argument, times):
  argument = argument * times
  return f'{argument}'

print(repeat_it("Hello", 2))



# 6. Write a function called will_it_nametag that takes in a name and a number, and tells you whether the name can be printed on a nametag that size.
#    For example, will_it_nametag("Peter", 10) will return True, but will_it_nametag("Peter", 4) will return False, because "Peter" is 5 letters long, and needs at least 5 spaces to fit on a nametag.

def will_it_nametag(name, length):
  if len(name) > length:
    return "false"
  elif len(name) == length:
    return "true"
  if len(name) < length:
    return "false"

print(will_it_nametag("hi", 2))


# 7. Write a function called add_liar that takes in two numbers and prints out a lie like "Sorry, I don't know how to add ___ and ___."
#    BUT even though it *prints* that it doesn't know the answer, have the function return the correct answer anyways.

def add_liar(x, y):
  total = x + y
  return f'Sorry, I dont know how to add {x} and {y}... {total} '
  

print(add_liar(1,2))

# 8. CHALLENGE: Now that you've written all these functions, try combining them. what would happen if you tried to call repeat_it(work_it("Stressed"), 3) ?

print(repeat_it(work_it("Stressed"), 3))

