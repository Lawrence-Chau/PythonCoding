language = "python3"
run = "python3 budgetTest.py"

import budget # This first line imports the file called budget.py, and the function you're creating called simple_budget_checker() and all the others will be stored within that file.

# In this file you will be testing the different budget checker functions you wrote in the budget.py file.
# Remember that since your functions will be RETURNING information, it will only be visible if you PRINT that return value out to the console.
# Also, because the functions are in a different file, you must access them using dot syntax like "budget.simple_budget_checker()" to let the
#     computer know where to find their definitions.

# Here are tests for the first three functions you wrote. Uncomment them to see them in action.
# Notice that they test both pass and fail cases, to make sure the functions work for any input.

#print(budget.simple_budget_checker(75)) # This test should print nothing because the 75 is less than 100 dollars.
#print(budget.simple_budget_checker(120)) # This test should print a warning because 120 is more than 100 dollars.

#print(budget.budget_checker(132)) # This test should print a warning because the budget has been exceeded.
#print(budget.budget_checker(69)) # This test should print a message saying that the user is under budget.

#print(budget.precise_budget_checker(100)) # This test should alert the user that they are at their maximum budget.
#print(budget.precise_budget_checker(132)) # This test should print a warning because the budget has been exceeded.
#print(budget.precise_budget_checker(69)) # This test should print a message saying that the user is under budget.




# Here you should try writing your own tests for ultimate_budget_checker().
# Make sure that you test each possible outcome so you know the function is working for any input, not just a success case.




# Once again, write your own tests for flexible_budget_checker().
# Try testing it with different budgets and different totals to make sure it always returns the correct result.


#all liquid
# Define your functions here

# Here's a function that's already been defined, but it's just a skeleton. It takes one argument (total) that we will pass to the function as an integer when we call it.
# 1. Replace "return" with code such that this function RETURNS the message "WARNING: Budget exceeded" if the total is over 100 dollars.

def simple_budget_checker(total):
  if total > budget:
   return "WARNING: Budget exceeded"



# 2. Define a function called budget_checker that checks to make sure the total is less than 100 dollars.
#    If the total is over 100 dollars, return the message "WARNING: Budget exceeded"
#    If the total is under 100 dollars, return the message "You're under budget!"

# def budget_checker(total):
#   if total < 100:
#     return "You're under budget!"
#   else:
#     return "WARNING: Budget exceeded"

# print(budget_checker(120))



# 3. Define a function called precise_budget_checker that checks to make sure the total is less than 100 dollars.
#    It should do exactly what the budget checker does, but it should ALSO return the message "STOP! Maximum reached" if the total is EXACTLY 100 dollars

# def precise_budget_checker(total):
#   if total < 100:
#     return "You're under budget!"
#   elif total == 100:
#     return "STOP! Maximum reached" 
#   else:
#     return "WARNING: Budget exceeded" 

# print(precise_budget_checker(100))


# 4. Write a function called ultimate_budget_checker that checks to make sure the total is less than 100 dollars.
#    If the total is under that amount, let the user know how many dollars they have left to spend.
#    If the total is over that amount, let the user know how many items they need to put back.

def ultimate_budget_checker(total):
  if total < 100:
    return 100 - total
  else:
    return total - 100

print(ultimate_budget_checker(120))


# 5. Below is a function called flexible_budget_checker. It hasn't been fully defined yet, but you can see it takes two arguments.
#    It should be exactly like the ultimate_budget_checker, except it will check your total against a budget YOU enter into the function.
#    For exemple, the code flexible_budget_checker(40, 50) should return the message "WARNING: budget exceeded by 10 dollars."

def flexible_budget_checker(budget, total):
  if total < budget:
   newTotal1 = budget - total
   return f'You have {newTotal1} dollar(s) left'
  elif total == budget:
    return "Stop! max reached"
  else:
    newTotal2 = total - budget
    return f'WARNING: budget exceeded {newTotal2} dollar(s)'

print(flexible_budget_checker(100,120))

# 6. CHALLENGE: The trouble with the first four functions is that they only work for a budget of 100 dollars.
#    The trouble with the fifth function is that it makes the test provide the budget every time.
#    The best solution to this would be to have a global variable called budget before you start defining functions, and then use that variable in place of the number 100.
#    GOAL: Refactor (rewrite) the first four functions, but change the literal 100 to a global variable.
#    Then test out the functions to see if they still work if the budget (stored in the global variable) is cut down to 40 dollars.

budget = 40

print(simple_budget_checker(50))
